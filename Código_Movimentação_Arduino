//Definindo as bibliotecas necessárias 
#include <Servo.h>    
#include <FlexiTimer2.h>

//definindo servos utilizados nas pernas
Servo servo[4][3];
const int servo_pin[4][3] = { {2, 3, 4}, {20, 6, 7}, {8, 9, 17}, {16, 12, 13} };

//Incluindo as dimensões do R.O.V
const float length_a = 300;
const float length_b = 400;
const float length_c = 400;
const float length_side = 71;
const float z_absolute = -28;

//Definindo constantes necessárias para o movimento
const float z_default = -50; 
z_up = -30; 
z_boot = z_absolute;
const float x_default = 62,
 x_offset = 0;
const float y_start = 0,
 y_step = 40;
const float y_default = x_default;

volatile float site_now[4][3];    
volatile float site_expect[4][3]; 
float temp_speed[4][3];   
float move_speed;     
float speed_multiple = 1; 
const float spot_turn_speed = 4;
const float leg_move_speed = 8;
const float body_move_speed = 3;
const float stand_seat_speed = 1;
volatile int rest_counter;      //+1/0.02s, for automatic rest

//Constantes utilizadas para rotacionar horizontalmente o R.O.V
const float temp_a = sqrt(pow(2 * x_default + length_side, 2) + pow(y_step, 2));
const float temp_b = 2 * (y_start + y_step) + length_side;
const float temp_c = sqrt(pow(2 * x_default + length_side, 2) + pow(2 * y_start + y_step + length_side, 2));
const float temp_alpha = acos((pow(temp_a, 2) + pow(temp_b, 2) - pow(temp_c, 2)) / 2 / temp_a / temp_b);

//Variáveis para virar o R.O.V
const float turn_x1 = (temp_a - length_side) / 2;
const float turn_y1 = y_start + y_step / 2;
const float turn_x0 = turn_x1 - temp_b * cos(temp_alpha);
const float turn_y0 = temp_b * sin(temp_alpha) - turn_y1 - length_side;

void setup()
{

//Iniciando R.O.V nos parâmetros cartesianos iniciais
 mov(0, x_default - x_offset, y_start + y_step, z_boot);
 mov(1, x_default - x_offset, y_start + y_step, z_boot);
 mov(2, x_default + x_offset, y_start, z_boot);
 mov(3, x_default + x_offset, y_start, z_boot);
 for (int i = 0; i < 4; i++)
 {
   for (int j = 0; j < 3; j++)
   {
     site_now[i][j] = site_expect[i][j];
   }
 }
 //start servo service
 FlexiTimer2::set(20, servo_service);
 FlexiTimer2::start();
 //initialize servos
 servo_attach();
}
void servo_attach(void)
{
 for (int i = 0; i < 4; i++)
 {
   for (int j = 0; j < 3; j++)
   {
     servo[i][j].attach(servo_pin[i][j]);
     delay(100);
   }
 }
}
void servo_detach(void)
{
 for (int i = 0; i < 4; i++)
 {
   for (int j = 0; j < 3; j++)
   {
     servo[i][j].detach();
     delay(100);
   }
 }
}
//Função utilizada para sentar o R.O.V
void sit(void)
{
 move_speed = stand_seat_speed;
 for (int leg = 0; leg < 4; leg++)
 {
   mov(leg, KEEP, KEEP, z_boot);
 }
 wait_all_reach();
}
//Função utilizada para movimentação de levantamento do R.O.V
void stand(void)
{
 move_speed = stand_seat_speed;
 for (int leg = 0; leg < 4; leg++)
 {
   mov(leg, KEEP, KEEP, z_default);
 }
 wait_all_reach();
}

//Função virar para esquerda
void turn_left(unsigned int step)
{
 move_speed = spot_turn_speed;
 while (step-- > 0)
 {
   if (site_now[3][1] == y_start)
   {
     //Movimentando pernas 1 e 3
     mov(3, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(0, turn_x1 - x_offset, turn_y1, z_default);
     mov(1, turn_x0 - x_offset, turn_y0, z_default);
     mov(2, turn_x1 + x_offset, turn_y1, z_default);
     mov(3, turn_x0 + x_offset, turn_y0, z_up);
     wait_all_reach();
     mov(3, turn_x0 + x_offset, turn_y0, z_default);
     wait_all_reach();
     mov(0, turn_x1 + x_offset, turn_y1, z_default);
     mov(1, turn_x0 + x_offset, turn_y0, z_default);
     mov(2, turn_x1 - x_offset, turn_y1, z_default);
     mov(3, turn_x0 - x_offset, turn_y0, z_default);
     wait_all_reach();
     mov(1, turn_x0 + x_offset, turn_y0, z_up);
     wait_all_reach();
     mov(0, x_default + x_offset, y_start, z_default);
     mov(1, x_default + x_offset, y_start, z_up);
     mov(2, x_default - x_offset, y_start + y_step, z_default);
     mov(3, x_default - x_offset, y_start + y_step, z_default);
     wait_all_reach();
     mov(1, x_default + x_offset, y_start, z_default);
     wait_all_reach();
   }
   else
   {
     //Movimentando pernas 0 e 2
     mov(0, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(0, turn_x0 + x_offset, turn_y0, z_up);
     mov(1, turn_x1 + x_offset, turn_y1, z_default);
     mov(2, turn_x0 - x_offset, turn_y0, z_default);
     mov(3, turn_x1 - x_offset, turn_y1, z_default);
     wait_all_reach();
     mov(0, turn_x0 + x_offset, turn_y0, z_default);
     wait_all_reach();
     mov(0, turn_x0 - x_offset, turn_y0, z_default);
     mov(1, turn_x1 - x_offset, turn_y1, z_default);
     mov(2, turn_x0 + x_offset, turn_y0, z_default);
     mov(3, turn_x1 + x_offset, turn_y1, z_default);
     wait_all_reach();
     mov(2, turn_x0 + x_offset, turn_y0, z_up);
     wait_all_reach();
     mov(0, x_default - x_offset, y_start + y_step, z_default);
     mov(1, x_default - x_offset, y_start + y_step, z_default);
     mov(2, x_default + x_offset, y_start, z_up);
     mov(3, x_default + x_offset, y_start, z_default);
     wait_all_reach();
     mov(2, x_default + x_offset, y_start, z_default);
     wait_all_reach();
   }
 }
}

void turn_right(unsigned int step)
{
 move_speed = spot_turn_speed;
 while (step-- > 0)
 {
   if (site_now[2][1] == y_start)
   {
     //Movimentando pernas 0 e 2
     mov(2, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(0, turn_x0 - x_offset, turn_y0, z_default);
     mov(1, turn_x1 - x_offset, turn_y1, z_default);
     mov(2, turn_x0 + x_offset, turn_y0, z_up);
     mov(3, turn_x1 + x_offset, turn_y1, z_default);
     wait_all_reach();
     mov(2, turn_x0 + x_offset, turn_y0, z_default);
     wait_all_reach();
     mov(0, turn_x0 + x_offset, turn_y0, z_default);
     mov(1, turn_x1 + x_offset, turn_y1, z_default);
     mov(2, turn_x0 - x_offset, turn_y0, z_default);
     mov(3, turn_x1 - x_offset, turn_y1, z_default);
     wait_all_reach();
     mov(0, turn_x0 + x_offset, turn_y0, z_up);
     wait_all_reach();
     mov(0, x_default + x_offset, y_start, z_up);
     mov(1, x_default + x_offset, y_start, z_default);
     mov(2, x_default - x_offset, y_start + y_step, z_default);
     mov(3, x_default - x_offset, y_start + y_step, z_default);
     wait_all_reach();
     mov(0, x_default + x_offset, y_start, z_default);
     wait_all_reach();
   }
   else
   {
     //leg 1&3 move
     mov(1, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(0, turn_x1 + x_offset, turn_y1, z_default);
     mov(1, turn_x0 + x_offset, turn_y0, z_up);
     mov(2, turn_x1 - x_offset, turn_y1, z_default);
     mov(3, turn_x0 - x_offset, turn_y0, z_default);
     wait_all_reach();
     mov(1, turn_x0 + x_offset, turn_y0, z_default);
     wait_all_reach();
     mov(0, turn_x1 - x_offset, turn_y1, z_default);
     mov(1, turn_x0 - x_offset, turn_y0, z_default);
     mov(2, turn_x1 + x_offset, turn_y1, z_default);
     mov(3, turn_x0 + x_offset, turn_y0, z_default);
     wait_all_reach();
     mov(3, turn_x0 + x_offset, turn_y0, z_up);
     wait_all_reach();
     mov(0, x_default - x_offset, y_start + y_step, z_default);
     mov(1, x_default - x_offset, y_start + y_step, z_default);
     mov(2, x_default + x_offset, y_start, z_default);
     mov(3, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(3, x_default + x_offset, y_start, z_default);
     wait_all_reach();
   }
 }
}

//Função de caminhar a frente
void step_forward(unsigned int step)
{
 move_speed = leg_move_speed;
 while (step-- > 0)
 {
   if (site_now[2][1] == y_start)
   {
     //leg 2&1 move
     mov(2, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(2, x_default + x_offset, y_start + 2 * y_step, z_up);
     wait_all_reach();
     mov(2, x_default + x_offset, y_start + 2 * y_step, z_default);
     wait_all_reach();
     move_speed = body_move_speed;
     mov(0, x_default + x_offset, y_start, z_default);
     mov(1, x_default + x_offset, y_start + 2 * y_step, z_default);
     mov(2, x_default - x_offset, y_start + y_step, z_default);
     mov(3, x_default - x_offset, y_start + y_step, z_default);
     wait_all_reach();
     move_speed = leg_move_speed;
     mov(1, x_default + x_offset, y_start + 2 * y_step, z_up);
     wait_all_reach();
     mov(1, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(1, x_default + x_offset, y_start, z_default);
     wait_all_reach();
   }
   else
   {
     //leg 0&3 move
     mov(0, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(0, x_default + x_offset, y_start + 2 * y_step, z_up);
     wait_all_reach();
     mov(0, x_default + x_offset, y_start + 2 * y_step, z_default);
     wait_all_reach();
     move_speed = body_move_speed;
     mov(0, x_default - x_offset, y_start + y_step, z_default);
     mov(1, x_default - x_offset, y_start + y_step, z_default);
     mov(2, x_default + x_offset, y_start, z_default);
     mov(3, x_default + x_offset, y_start + 2 * y_step, z_default);
     wait_all_reach();
     move_speed = leg_move_speed;
     mov(3, x_default + x_offset, y_start + 2 * y_step, z_up);
     wait_all_reach();
     mov(3, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(3, x_default + x_offset, y_start, z_default);
     wait_all_reach();
   }
 }
}
//Movimentar-se linearmente para trás
void step_back(unsigned int step)
{
 move_speed = leg_move_speed;
 while (step-- > 0)
 {
   if (site_now[3][1] == y_start)
   {
     //leg 3&0 move
     mov(3, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(3, x_default + x_offset, y_start + 2 * y_step, z_up);
     wait_all_reach();
     mov(3, x_default + x_offset, y_start + 2 * y_step, z_default);
     wait_all_reach();
     move_speed = body_move_speed;
     mov(0, x_default + x_offset, y_start + 2 * y_step, z_default);
     mov(1, x_default + x_offset, y_start, z_default);
     mov(2, x_default - x_offset, y_start + y_step, z_default);
     mov(3, x_default - x_offset, y_start + y_step, z_default);
     wait_all_reach();
     move_speed = leg_move_speed;
     mov(0, x_default + x_offset, y_start + 2 * y_step, z_up);
     wait_all_reach();
     mov(0, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(0, x_default + x_offset, y_start, z_default);
     wait_all_reach();
   }
   else
   {
     //leg 1&2 move
     mov(1, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(1, x_default + x_offset, y_start + 2 * y_step, z_up);
     wait_all_reach();
     mov(1, x_default + x_offset, y_start + 2 * y_step, z_default);
     wait_all_reach();
     move_speed = body_move_speed;
     mov(0, x_default - x_offset, y_start + y_step, z_default);
     mov(1, x_default - x_offset, y_start + y_step, z_default);
     mov(2, x_default + x_offset, y_start + 2 * y_step, z_default);
     mov(3, x_default + x_offset, y_start, z_default);
     wait_all_reach();
     move_speed = leg_move_speed;
     mov(2, x_default + x_offset, y_start + 2 * y_step, z_up);
     wait_all_reach();
     mov(2, x_default + x_offset, y_start, z_up);
     wait_all_reach();
     mov(2, x_default + x_offset, y_start, z_default);
     wait_all_reach();
   }
 }
}
void body_left(int i)
{
 mov(0, site_now[0][0] + i, KEEP, KEEP);
 mov(1, site_now[1][0] + i, KEEP, KEEP);
 mov(2, site_now[2][0] - i, KEEP, KEEP);
 mov(3, site_now[3][0] - i, KEEP, KEEP);
 wait_all_reach();
}
void body_right(int i)
{
 mov(0, site_now[0][0] - i, KEEP, KEEP);
 mov(1, site_now[1][0] - i, KEEP, KEEP);
 mov(2, site_now[2][0] + i, KEEP, KEEP);
 mov(3, site_now[3][0] + i, KEEP, KEEP);
 wait_all_reach();
}
}
void head_up(int i)
{
 mov(0, KEEP, KEEP, site_now[0][2] - i);
 mov(1, KEEP, KEEP, site_now[1][2] + i);
 mov(2, KEEP, KEEP, site_now[2][2] - i);
 mov(3, KEEP, KEEP, site_now[3][2] + i);
 wait_all_reach();
}
void head_down(int i)
{
 mov(0, KEEP, KEEP, site_now[0][2] + i);
 mov(1, KEEP, KEEP, site_now[1][2] - i);
 mov(2, KEEP, KEEP, site_now[2][2] + i);
 mov(3, KEEP, KEEP, site_now[3][2] - i);
 wait_all_reach();
}
void servo_service(void)
{
 sei();
 static float alpha, beta, gamma;
 for (int i = 0; i < 4; i++)
 {
   for (int j = 0; j < 3; j++)
   {
     if (abs(site_now[i][j] - site_expect[i][j]) >= abs(temp_speed[i][j]))
       site_now[i][j] += temp_speed[i][j];
     else
       site_now[i][j] = site_expect[i][j];
   }
   cartesian_to_polar(alpha, beta, gamma, site_now[i][0], site_now[i][1], site_now[i][2]);
   polar_to_servo(i, alpha, beta, gamma);
 }
 rest_counter++;
}
void mov(int leg, float x, float y, float z)
{
 float length_x = 0, length_y = 0, length_z = 0;
 if (x != KEEP)length_x = x - site_now[leg][0];
 if (y != KEEP)length_y = y - site_now[leg][1];
 if (z != KEEP)length_z = z - site_now[leg][2];
 float length = sqrt(pow(length_x, 2) + pow(length_y, 2) + pow(length_z, 2));
 temp_speed[leg][0] = length_x / length * move_speed * speed_multiple;
 temp_speed[leg][1] = length_y / length * move_speed * speed_multiple;
 temp_speed[leg][2] = length_z / length * move_speed * speed_multiple;
 if (x != KEEP)
   site_expect[leg][0] = x;
 if (y != KEEP)
   site_expect[leg][1] = y;
 if (z != KEEP)
   site_expect[leg][2] = z;
}
//Funções que auxiliam o R.O.V a chegar no destino
void wait_reach(int leg)
{
 while (1)
   if (site_now[leg][0] == site_expect[leg][0])
     if (site_now[leg][1] == site_expect[leg][1])
       if (site_now[leg][2] == site_expect[leg][2])
         break;
}
void wait_all_reach(void)
{
 for (int i = 0; i < 4; i++)
   wait_reach(i);
}

//Transformação do eixo cartesiano para o polar
void cartesian_to_polar(volatile float &alpha, volatile float &beta, volatile float &gamma, volatile float x, volatile float y, volatile float z)
{
 //calculate w-z degree
 float v, w;
 w = (x >= 0 ? 1 : -1) * (sqrt(pow(x, 2) + pow(y, 2)));
 v = w - length_c;
 alpha = atan2(z, v) + acos((pow(length_a, 2) - pow(length_b, 2) + pow(v, 2) + pow(z, 2)) / 2 / length_a / sqrt(pow(v, 2) + pow(z, 2)));
 beta = acos((pow(length_a, 2) + pow(length_b, 2) - pow(v, 2) - pow(z, 2)) / 2 / length_a / length_b);
gamma = (w >= 0) ? atan2(y, x) : atan2(-y, -x);
alpha = alpha / pi * 180;
 beta = beta / pi * 180;
 gamma = gamma / pi * 180;
}
//Função que transforma parâmetros matemáricos do polar para as 4 pernas
void polar_to_servo(int leg, float alpha, float beta, float gamma)
{
 if (leg == 0)
 {
   alpha = 90 - alpha;
   beta = beta;
   gamma += 90;
 }
 else if (leg == 1)
 {
   alpha += 90;
   beta = 180 - beta;
   gamma = 90 - gamma;
 }
 else if (leg == 2)
 {
   alpha += 90;
   beta = 180 - beta;
   gamma = 90 - gamma;
 }
 else if (leg == 3)
 {
   alpha = 90 - alpha;
   beta = beta;
   gamma += 90;
 }
 servo[leg][0].write(alpha);
 servo[leg][1].write(beta);
 servo[leg][2].write(gamma);
}

